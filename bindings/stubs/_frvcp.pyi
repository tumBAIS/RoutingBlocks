DPLabel = Any


class Propagator:
    def __init__(self) -> None: ...

    def cheaper_than(self, label: DPLabel, other_label: DPLabel) -> bool: ...

    def create_root_label(self) -> DPLabel: ...

    def dominates(self, label: DPLabel, other_label: DPLabel) -> bool: ...

    def extract_path(self, label: DPLabel) -> List[VertexID]: ...

    def is_final_label(self, label: DPLabel) -> bool: ...

    def order_before(self, label: DPLabel, other_label: DPLabel) -> bool: ...

    def prepare(self, route_vertex_ids: List[VertexID]) -> None: ...

    def propagate(self, label: DPLabel, origin_vertex: Vertex, target_vertex: Vertex, arc: Arc) -> Optional[
        DPLabel]: ...


class FRVCP:
    def __init__(self, instance: Instance, propagator: Propagator) -> None: ...

    def optimize(self, route_vertex_ids: List[VertexID]) -> List[VertexID]: ...
