class Solution:
    @overload
    def __init__(self, evaluation: Evaluation, instance: Instance, number_of_routes: int) -> None: ...

    @overload
    def __init__(self, evaluation: Evaluation, instance: Instance, routes: List[Route]) -> None: ...

    def add_route(self, route: Optional[Route] = None) -> None: ...

    @overload
    def exchange_segment(self, first_route: Route, first_route_begin_position: int, first_route_end_position: int,
                         second_route: Route, second_route_begin_position: int,
                         second_route_end_position: int) -> None: ...

    @overload
    def exchange_segment(self, first_route_index: int, first_route_begin_position: int, first_route_end_position: int,
                         second_route_index: int, second_route_begin_position: int,
                         second_route_end_position: int) -> None: ...

    def find(self, vertex_id: int) -> List[NodeLocation]: ...

    def insert_vertex_after(self, after_location: NodeLocation, vertex_id: int) -> int: ...

    def insert_vertices_after(self, arg0: Iterable[Tuple[VertexID, NodeLocation]]) -> None: ...

    def lookup(self, location: NodeLocation) -> Node: ...

    def remove_route(self, route: Route) -> None: ...

    def remove_vertex(self, location: NodeLocation) -> None: ...

    def remove_vertices(self, locations: List[NodeLocation]) -> None: ...

    def __copy__(self) -> Solution: ...

    def __deepcopy__(self, memodict: dict = {}) -> Solution: ...

    def __delitem__(self, route_index: int) -> None: ...

    def __eq__(self, other: Solution) -> bool: ...

    def __getitem__(self, route_index: int) -> Route: ...

    def __iter__(self) -> Iterator: ...

    def __len__(self) -> int: ...

    def __ne__(self, other: Solution) -> bool: ...

    @property
    def cost(self) -> cost_t: ...

    @property
    def cost_components(selfa) -> List[resource_t]: ...

    @property
    def feasible(self) -> bool: ...

    @property
    def insertion_points(self) -> List[NodeLocation]: ...

    @property
    def non_depot_nodes(self) -> List[NodeLocation]: ...

    @property
    def number_of_insertion_points(self) -> int: ...

    @property
    def number_of_non_depot_nodes(self) -> int: ...

    @property
    def routes(self) -> Iterator: ...
