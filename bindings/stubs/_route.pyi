from typing import ClassVar


class Route:
    def __init__(self, evaluation: Evaluation, instance: Instance) -> None: ...

    @property
    def cost(self) -> float: ...

    @property
    def cost_components(self) -> List[float]: ...

    @property
    def depot(self) -> Node: ...

    @property
    def empty(self) -> bool: ...

    @property
    def end_depot(self) -> Node: ...

    @property
    def feasible(self) -> bool: ...

    @property
    def modification_timestamp(self) -> int: ...

    def __iter__(self) -> Iterator: ...

    def __len__(self) -> int: ...

    def __eq__(self, arg0: Route) -> bool: ...

    def __ne__(self, arg0: Route) -> bool: ...

    def exchange_segments(self, segment_begin_position: int, segment_end_position: int,
                          other_segment_begin_position: int,
                          other_segment_end_position: int, other_route: Route) -> None: ...

    def insert_segment_after(self, position: int, node_segment: List[Node]) -> int: ...

    def insert_vertices_after(self, vertices: Iterable) -> None: ...

    def remove_segment(self, begin_position: int, end_position: int) -> int: ...

    def remove_vertices(self, vertex_positions: List[int]) -> None: ...

    def update(self) -> None: ...

    def __copy__(self) -> Route: ...

    def __deepcopy__(self, memodict: Dict = None) -> Route: ...

    def __getitem__(self, position: int) -> Node: ...


def create_route(evaluation: Evaluation, instance: Instance, vertex_ids: List[int]) -> Route: ...
